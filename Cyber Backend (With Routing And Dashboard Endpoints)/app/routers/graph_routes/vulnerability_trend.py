from fastapi import APIRouter, HTTPException
from connection.connection import get_uploaded_files_collection
from utils.aggregations import latest_vuln_stages
from typing import Literal

router = APIRouter()

@router.get("/vulnerability-trend")
async def get_vulnerability_trend(granularity: Literal["monthly", "yearly"] = "monthly"):
    try:
        collection = await get_uploaded_files_collection()
        date_format = "%Y-%m" if granularity == "monthly" else "%Y"
        
        pipeline = latest_vuln_stages + [
            # Parse the date field
            {
                "$addFields": {
                    "pub_date": {
                        "$dateFromString": {
                            "dateString": "$Vuln Publication Date",
                            "format": "%b %d, %Y %H:%M",  # Updated format to match the actual date string
                            "onError": None,  # Returns null for invalid dates
                            "timezone": "Asia/Kolkata"
                        }
                    }
                }
            },
            # Filter out documents where pub_date is null
            {
                "$match": {
                    "pub_date": {"$ne": None}
                }
            },
            # Group by the specified granularity
            {
                "$group": {
                    "_id": {
                        "$dateToString": {
                            "format": date_format,
                            "date": "$pub_date"
                        }
                    },
                    "count": {"$sum": 1}
                }
            },
            # Sort by date
            {
                "$sort": {"_id": 1}
            },
            # Project the final output
            {
                "$project": {
                    "date": "$_id",
                    "count": 1,
                    "_id": 0
                }
            }
        ]
        
        cursor = collection.aggregate(pipeline)
        result = await cursor.to_list(length=None)
        
        if not result:
            return []  # Return empty list if no valid data found
        
        return result
    
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error: {str(e)}")